[{"content":"","date":"29 tháng 6 2025","externalUrl":null,"permalink":"/random-stuff/","section":"Chuyện linh tinh","summary":"","title":"Chuyện linh tinh","type":"random-stuff"},{"content":"Gần đây, mình bắt đầu dịch loạt sách Bạn không hiểu JS (You don\u0026rsquo;t know JS). Thực ra mình đã đọc và có ý định dịch lâu rồi nhưng cứ lần lữa mãi. Căn bản là trong quá trình dịch, mình luôn lấn cấn một vấn đề: Có nên dịch thuật ngữ chuyên ngành hay không?\nCó hai trường phái khi đọc sách: đọc nhanh để lấy kiến thức và đọc một cách kĩ lưỡng. Đối với sách kĩ thuật thì trường phái thứ nhất gần như là chủ yếu. Dễ hiểu thôi, vì chính bản thân mình cũng làm thế. Tài nguyên là vô số, không ai có thời gian để nghiền ngẫm một cuốn sách đầy những từ học thuật hay những kiến thức hàn lâm dài dòng, trừ khi có ý định nghiên cứu sâu. Tuy nhiên, khi nhìn dưới góc độ của dịch giả thì câu chuyện lại hoàn toàn khác. \u0026ldquo;Dịch\u0026rdquo; không chỉ đơn thuần là việc chuyển mớ ngôn ngữ này sang ngôn ngữ kia mà còn phải làm sao cho người đọc không có cảm giác gượng gạo, khó hiểu, thậm chí không cảm thấy mình đang đọc một cuốn sách từ ngôn ngữ khác, đồng thời vẫn truyền tải được đúng tinh thần của tác giả. Mình thì không phải dân chuyên, văn có 4.9 nên không dám đảm bảo cho ra một bản dịch mượt như Sunsilk, tuy nhiên mình cũng cố gắng để có đầu ra chất lượng tốt nhất. Để làm được thế, mình cũng phải bỏ công tra cứu khi gặp những câu khó, nhất là những từ hay thành ngữ khó tìm được nghĩa tương đương trong tiếng Việt.\nQuay lại với câu hỏi có nên dịch thuật ngữ chuyên ngành hay không, câu trả lời là \u0026ldquo;tại sao lại không nhỉ?\u0026rdquo;. Mình thấy có hai lí do chính thường được đem ra để bào chữa: thứ nhất, thuật ngữ chuyên ngành mang tính đặc thù, dịch ra sẽ dài dòng hoặc nghe nó\u0026hellip; buồn cười; thứ hai, sử dụng từ dịch thì sẽ không biết từ gốc là gì, khi cần tra cứu sẽ gặp khó khăn.\nNhững lí do trên nghe qua cũng khá hợp lí nhưng nếu nghĩ kĩ một tí, bạn sẽ thấy chúng chẳng thuyết phục chút nào. Để mình lấy một ví dụ: Chúng ta đều biết hệ điều hành phổ biến nhất trên thế giới là Windows nhưng chẳng ai gọi nó là hệ điều hành Cửa sổ cả. Nghe buồn cười đúng không? Nhưng đúng nó mang nghĩa là \u0026ldquo;cửa sổ\u0026rdquo; thật mà? Biểu tượng của nó cũng là một ô cửa sổ. Chỉ vì nghe nó \u0026ldquo;quê\u0026rdquo; mà ta sẽ không dùng từ dịch ư? Thế thì hãy giải thích cho mình tại sao không ai phản đối khi gọi Apple là hãng \u0026ldquo;Táo\u0026rdquo;?\n\u0026ldquo;Ê mày, máy tao đơ quá. Cài lại Cửa sổ hộ tao phát.\u0026rdquo;\n\u0026ldquo;Cài cái gì cơ?\u0026rdquo;\n\u0026ldquo;Cửa sổ, Windows ấy.\u0026rdquo;\n\u0026ldquo;Win thì nói là Win, đếch ai gọi là cửa sổ.\u0026rdquo;\n\u0026ldquo;Ơ, thế sao đợt tao mua iPhone 16, mày bảo là bọn Táo giờ toàn lùa gà chứ có công nghệ gì mới đâu?\u0026rdquo;\n\u0026ldquo;Táo khác, người ta quen gọi thế rồi.\u0026rdquo;\n\u0026ldquo;Đấy là người Việt gọi chứ người Mĩ làm gì nói thế. Với lại win là \u0026ldquo;chiến thắng\u0026rdquo;, người Mĩ chả ai gọi Windows là Win cả.\u0026rdquo;\n\u0026ldquo;Lằng nhằng! Thế mày có cài không?\u0026rdquo;\nĐặt mình vào vai một người dùng tiếng Anh làm tiếng mẹ đẻ, có phải nghe đoạn hội thoại trên bạn cũng thấy buồn cười nếu có ai gọi hệ điều hành kia là Chiến thắng không. Mình để ý thấy họ cũng hay đặt những cái tên vui vui cho phần mềm. Chẳng hạn Android các đời trước đều lấy tên phiên bản từ các loại bánh kẹo, Ubuntu thì dùng tên các con vật, vv\u0026hellip; Những cái ấy rất bình thường đối với họ thì chẳng có lí do gì lại không bình thường với chúng ta cả. Tiếng Việt của ta rất phong phú, cha ông đã dày công sáng tạo, sao chúng ta lại ngại dùng? Bạn có nghĩ rằng những kiến thức bạn thu nạp được đến giờ cũng nhờ công những người đi trước dịch từ tiếng nước ngoài cho chúng ta dễ tiếp cận? Bạn có tự tin rằng 100% những gì bạn học là từ ngôn ngữ gốc?\nTất nhiên không phải lúc nào cũng có từ phù hợp để dịch. Có những từ trong ngôn ngữ nguồn là từ ghép hoặc một khái niệm mà chúng ta không có, khi ấy ta buộc phải lấy phiên âm của chúng ra mà \u0026ldquo;dịch\u0026rdquo;, hay như bây giờ ủng hộ việc giữ nguyên từ gốc. Điều ấy thì không phải bàn cãi. Nếu là một chuyên gia ngôn ngữ học, rất có thể họ sẽ sáng tạo ra từ mới. Mình không phải chuyên gia, như đã khẳng định từ trước, nên sẽ chọn lối đi an toàn như trên. Và cũng để đề phòng bạn gặp khó khăn khi đọc bản dịch của mình, mình có chú thích các thuật ngữ gốc để bạn tra cứu thêm nếu cần thiết.\nĐối với nhiều người, ngôn ngữ chỉ là công cụ giao tiếp. Đối với mình, ngôn ngữ đại diện cho tiếng nói của dân tộc. Để giữ gìn sự trong sáng của tiếng Việt, mình sẽ dịch nhiều nhất có thể. Hi vọng các bạn sẽ ủng hộ bản dịch của mình. Mình sẽ rất cảm ơn nếu bạn ghé qua trang github này , đọc và góp ý cho nó.\n","date":"29 tháng 6 2025","externalUrl":null,"permalink":"/random-stuff/specialized-translation-to-do-or-not-to-do/","section":"Chuyện linh tinh","summary":"","title":"Dịch thuật chuyên ngành: Nên hay không?","type":"random-stuff"},{"content":"","date":"29 tháng 6 2025","externalUrl":null,"permalink":"/tags/linh-tinh/","section":"Tags","summary":"","title":"Linh Tinh","type":"tags"},{"content":"","date":"29 tháng 6 2025","externalUrl":null,"permalink":"/","section":"Lơ lửng","summary":"","title":"Lơ lửng","type":"page"},{"content":"","date":"29 tháng 6 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"7 tháng 6 2025","externalUrl":null,"permalink":"/work/","section":"Chuyện nghề","summary":"","title":"Chuyện nghề","type":"work"},{"content":"","date":"7 tháng 6 2025","externalUrl":null,"permalink":"/tags/chuy%E1%BB%87n-ngh%E1%BB%81/","section":"Tags","summary":"","title":"Chuyện Nghề","type":"tags"},{"content":"Cuối cùng thì mình cũng đủ thời gian để hoàn thành yate 2.0. Tối qua mình đã đóng gói và gửi phiên bản mới cho Mozilla. Khi viết bài này thì tiện ích của mình đã được phê duyệt nhưng lại phát sinh một lỗi mới 😭.\nBan đầu vào trang thì dịch rất mượt nhưng một lúc sau sẽ không thấy nó phản hồi nữa. Hiện tượng này không cố định mà xảy ra bất chợt, có thể sau 10 phút, 20 phút hoặc\u0026hellip; không xảy ra! Mình đã tìm ra nguyên nhân còn cách khắc phục thì chưa. Sau bài viết này mình sẽ bắt tay vào sửa. Viết vội vài chữ để báo cáo tình hình thế thôi.\n","date":"7 tháng 6 2025","externalUrl":null,"permalink":"/work/unearthed-notes-the-last-hurdle/","section":"Chuyện nghề","summary":"","title":"Đào mộ bút kí: Trở ngại cuối cùng?","type":"work"},{"content":"","date":"7 tháng 6 2025","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"7 tháng 6 2025","externalUrl":null,"permalink":"/series/yate/","section":"Series","summary":"","title":"Yate","type":"series"},{"content":"","date":"7 tháng 6 2025","externalUrl":null,"permalink":"/tags/yate/","section":"Tags","summary":"","title":"Yate","type":"tags"},{"content":"Xin chào, đã 1 tháng kể từ bài viết gần nhất của mình về yate và đến nay\u0026hellip; vẫn chưa có thêm tiến triển 😥. Do đang ôn thi lái xe nên chẳng có thời gian làm, nhưng mình không muốn để blog lên mốc nên phải viết một cái gì đó.\nNếu là một người hâm mộ của bàn phím và terminal, sau khi đọc tiêu đề hẳn bạn sẽ đoán ra mình muốn nhắc tới công cụ nào. Đúng rồi đấy, chính là Neovim! Bạn có thể từng nghe về nó nhưng chưa biết nó thực sự như thế nào. Bạn có thể đã từng dùng một thứ tương tự như Vim và thấy nó khó vãi ra. Bạn là kiểu người thích một phát ăn ngay, cài vào là dùng thôi. Thế thì Neovim không dành cho bạn. Nhưng không có gì ngăn cản bạn thử cả, biết đâu bạn sẽ thay đổi quan điểm sau khi đọc bài này 😎.\nĐã có rất nhiều bài viết ca ngợi Neovim trên mạng rồi nên mình sẽ không làm lại điều đó, thay vào đó mình sẽ cung cấp cho các bạn cách tiếp cận với nó. Mình từng đau đầu để tìm ra một chương trình soạn thảo mã nguồn có thể đảm đương nhiệm vụ của tất cả những phần mềm hiện tại. Vì sao ư? Quá rõ ràng là để khỏi phải cài một đống phần mềm và cấu hình từng cái một. Là lập trình viên, bạn sẽ phải làm việc với rất nhiều ngôn ngữ. Các ngôn ngữ kịch bản thì chỉ cần một cái gì đó để viết và lưu lại là chạy được, còn với những ngôn ngữ cần biên dịch như Java hay C# thì bạn sẽ có xu hướng dùng IDE cho nó nhanh, trừ khi bạn thích \u0026ldquo;khổ dâm\u0026rdquo; hoặc là bậc thầy về ngôn ngữ đó. Mình thì\u0026hellip; là kiểu người thứ nhất. Năm nhất đại học, học Nhập môn lập trình, trong khi các bạn dùng Dev-C++, Visual Studio, mình viết và chạy mã C bằng Notepad++, thậm chí còn lên video hướng dẫn trên Youtube. Với mình, thời ấy Notepad++ là đỉnh nhất, vừa nhanh vừa nhẹ, không như mấy thằng kia mở mãi mới lên. Rồi năm tiếp theo học tới Java, mình phải từ bỏ nó vì không làm cách nào cấu hình cho Java chạy với Notepad++ được. Thêm vào đó, mình dùng song song hai hệ điều hành nên cần một công cụ hỗ trợ đa nền tảng, Notepad++ không đáp ứng được. Ám ảnh với việc thỉnh thoảng phải cài lại máy và đổi qua lại hệ điều hành, tìm kiếm các phần mềm tương thích và thiết lập chúng, mình tìm tới Vim nhưng sau khi thử lần đầu, mình chẳng biết thao tác kiểu gì và điều duy nhất mình làm được là ấn nút 🅇 để thoát. Thời gian đó VSCode đang nổi nên mình cũng sử dụng và nó gần như trở thành chân ái của mình. Nhược điểm duy nhất là nó được viết bằng Electron nên ngốn RAM kinh khủng. Vậy nên sau một thời gian dài nhấc lên đặt xuống, mình quyết tìm hiểu và dùng bằng được Vim. Và giờ là Neovim.\nNeovim không khó hay đáng sợ, miễn là bạn tìm được hướng tiếp cận phù hợp. Mình đã trải qua và sẽ giúp bạn rút ngắn công đoạn. Trước hết, khi dùng Neovim thì bạn cứ xác định vứt chuột đi. Không có nút bấm nào, không có bảng chọn nào, tất cả những gì bạn làm là gõ và gõ thôi. Thực ra Neovim cũng hỗ trợ dùng chuột nhưng theo mình, bạn nên tập thói quen giữ tay trên bàn phím để tăng năng suất làm việc. Tiếp theo, lên Youtube học một khóa cơ bản về Vim, mình đề xuất video này . Bạn cứ cài Neovim và làm theo, hệ thống phím của chúng tương tự nhau thôi. Khác biệt duy nhất là cần thêm n vào trước lệnh vim để mở giao diện soạn thảo. Sau khi nắm được cách vận hành, xem tiếp video này để thiết lập Neovim một lần và mãi mãi. Từ giờ, bạn đã có trong tay một công cụ tuyệt vời để viết mã, không cần lo lắng việc thiếu RAM, thao tác chậm chạp, đồng bộ cấu hình hay sử dụng trên nhiều hệ điều hành. Chỉ một thao tác git clone, toàn bộ những gì bạn đã thiết lập sẽ có trên máy bạn. Khi đã quen thuộc hơn, hãy dành thời gian tìm hiểu về các phần cài cắm (plugin) để có thiết lập vừa ý. Hoặc nếu lười, bạn có thể nghía qua kho cấu hình của mình. Ngoài những thiết lập cơ bản, mình đã cài đặt sẵn cho các ngôn ngữ mình đang làm việc: Java, JS, HTML và CSS. Đính kèm trợ lí AI xịn không thua gì các IDE hiện tại.\nÀ, có một sự thật cần tiết lộ: mình cũng không thực sự hiểu Neovim làm gì bên dưới đâu, nhưng hãy cứ dùng đi, bạn sẽ không hối tiếc đâu, thật đấy!\n","date":"2 tháng 6 2025","externalUrl":null,"permalink":"/work/the-ultimate-code-editor/","section":"Chuyện nghề","summary":"","title":"Chương trình biên soạn mã nguồn tối thượng","type":"work"},{"content":"","date":"2 tháng 6 2025","externalUrl":null,"permalink":"/tags/code-editor/","section":"Tags","summary":"","title":"Code Editor","type":"tags"},{"content":"","date":"2 tháng 6 2025","externalUrl":null,"permalink":"/tags/neovim/","section":"Tags","summary":"","title":"Neovim","type":"tags"},{"content":"","date":"2 tháng 6 2025","externalUrl":null,"permalink":"/tags/text-editor/","section":"Tags","summary":"","title":"Text Editor","type":"tags"},{"content":"Hôm nay nghỉ lễ, tranh thủ làm tiếp. Đi làm một cái là lại bận ngay 😮‍💨. Chưa có gì tiến triển nhiều vì mình gặp phải một vấn đề: Shadow DOM không hỗ trợ phông chữ nên mấy nút bấm chứa biểu tượng của mình biến mất tiêu. Cách chữa là định nghĩa phông bên ngoài phần tử ẩn.\nĐể tải phông thì có vài cách, phổ biến nhất là dùng luật @font-face trong tập tin CSS hoặc thẻ link trong HTML. Mình thường chọn cách thứ nhất. Dưới đây là tóm tắt cách làm:\n/* fonts.css */ @font-face { font-family: \u0026#34;Nunito\u0026#34;; font-style: normal; font-weight: 400; src: url(res/fonts/Nunito-400.woff2) format(\u0026#34;woff2\u0026#34;); } @font-face { font-family: \u0026#34;Nunito\u0026#34;; font-style: normal; font-weight: 700; src: url(res/fonts/Nunito-700.woff2) format(\u0026#34;woff2\u0026#34;); } /* my-element.css */ /* Các luật áp dụng cho phần tử `my-element` */ \u0026lt;head\u0026gt; \u0026lt;!-- phông cho phần tử ẩn --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;path/to/fonts.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- phần tử tự định nghĩa --\u0026gt; \u0026lt;my-element\u0026gt; \u0026lt;!-- các thuộc tính CSS khác có thể khai báo bình thường bên trong --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;path/to/my-element.css\u0026#34;\u0026gt; \u0026lt;/my-element\u0026gt; \u0026lt;/body\u0026gt; Trong mã nguồn thì mình xử lí riêng đối với Webpack, cụ thể các bạn có thể xem tại cam kết 96a3f51 . Cách làm thì đơn giản thôi, còn nguyên nhân tại sao thì mình chưa tìm được.\nThế thôi đã, nay 50 năm giải phóng đất nước cơ mà, chơi nốt mai làm tiếp 😁.\n","date":"30 tháng 4 2025","externalUrl":null,"permalink":"/work/unearthed-notes-migrate-yate-to-web-component-2/","section":"Chuyện nghề","summary":"","title":"Đào mộ bút kí: Chuyển đổi yate sang nền tảng Phần tử web 2","type":"work"},{"content":"Gần một tuần đã trôi qua và mình cũng chuyển đổi được phần lớn mã nguồn sang nền tảng mới. Hi vọng sang tuần sau có thể hoàn thành. Trong bài viết trước , các bạn đã biết mình sử dụng Preact để làm giao diện. Đáng lẽ để tiết kiệm thời gian, mình nên sửa lỗi thay vì xây dựng lại như thế này, nhưng có hai nguyên nhân khiến mình muốn đổi nền tảng.\nThứ nhất, để làm tính năng dịch trên trang web, mình cần nhúng mã của mình vào trang. Một số trang web bị xung đột CSS với tiện ích của mình nên hiển thị không được tốt. Để khắc phục, mình sử dụng kĩ thuật Shadow DOM nhằm đảm bảo tách biệt hẳn phần tử của mình với các phần tử của trang web gốc. Preact không hỗ trợ kĩ thuật này.\nThứ hai, các thư viện sinh phần tử như Preact, React, vv đều sử dụng innerHTML ở đâu đó trong mã nguồn. Dù mình không sử dụng đến nhưng khi đóng gói tiện ích sẽ bị cảnh báo phương pháp này không an toàn. Đây cũng là một trong số các lí do có thể khiến tiện ích bị từ chối phê duyệt, mình thường phải thêm một đoạn giải thích để họ thông qua cho.\nVậy nên mình chuyển sang Web components để giải quyết các vấn đề trên. Đổi lại mình không thể dùng được jsx nữa. Nhiều người không thích React vì cho rằng viết jsx phá hỏng các ngữ nghĩa của web và khiến mã nguồn lộn xộn vì trộn giữa JS và HTML. Theo mình thì điều này chỉ đúng đối với các tay mơ học lập trình. Thay vì học từ gốc thì họ nhảy thẳng vào các thư viện và bộ khung nên không hiểu bản chất, dẫn tới mã nguồn tệ. Dù sao cái gì cũng có tính hai mặt, được cái này mất cái kia là chuyện thường. So với lợi ích đạt được thì hi sinh một chút trải nghiệm lập trình cũng đáng.\nPhần tử web là công nghệ được hỗ trợ sẵn bởi trình duyệt cho phép bạn đóng gói các thành phần trong một trang web theo hướng phần tử, tương tự như cách các thư viện đang làm. Ưu điểm là mình có thể tương tác trực tiếp với DOM mà không cần tới các cơ chế quản lý trạng thái phức tạp. Nhờ thế logic xử lí của mình giảm đi nhiều mà mã nguồn cũng không thay đổi mấy. Việc của mình chỉ là bê các phần tử từ Preact sang, tiện thể cải tiến luôn những gì còn thiếu sót trong phiên bản trước.\nChẳng hạn, phần tử chọn ngôn ngữ trước đây chỉ dùng chuột để chọn được, giờ có thể chọn bằng bàn phím. Phần xử lí không quá phức tạp nhưng tại thời điểm làm ra yate, mình cũng chưa vững lắm về quản lí trạng thái trong React nên loay hoay mãi không xong. Kế đến là phần nhập chữ, nếu gõ nhanh quá thì có thể mất chữ, dẫn tới dịch thiếu. Nguyên do là mình sử dụng kĩ thuật debounce (chống nảy) để giảm bớt số lượng sự kiện phải xử lí. Sau khi bỏ đi mớ trạng thái của Preact, mình chỉ cần tập trung vào sự kiện chính là lấy các từ mới đem đi dịch, nhờ thế hiệu suất tăng lên rõ rệt 😁.\nMột lưu ý nhỏ cho bạn nào mới làm quen với phần tử web: nếu cần xử lí sự kiện riêng (CustomEvent) của phần tử, đừng đặt tên sự kiện trùng với các sự kiện có sẵn của trình duyệt và đảm bảo nó chỉ xảy ra trong phần tử đó (đặt thuộc tính bubbles = false). Nếu không bạn sẽ gặp phải tình huống không biết phần tử nào phát đi sự kiện hay sự kiện bị gọi nhiều lần như mình đã dính phải d3c62ee .\nTạm thời tuần này kết thúc với việc hoàn thành chức năng dịch bằng cửa sổ thu nhỏ, tuần tới mình sẽ làm nốt dịch trên trang. Hẹn gặp lại!\n","date":"27 tháng 4 2025","externalUrl":null,"permalink":"/work/unearthed-notes-migrate-yate-to-web-components/","section":"Chuyện nghề","summary":"","title":"Đào mộ bút kí: Chuyển đổi yate sang nền tảng Phần tử web","type":"work"},{"content":"Như đã nói ở bài viết đầu tiên , mình sẽ bắt đầu lục lại những dự án cũ để phát triển tiếp, và dự án được lên thớt trước là yate - tiện ích dịch trên trình duyệt. Mình dùng nó thường xuyên mà 3 năm rồi không cập nhật gì cả, phần vì ít người dùng, phần nữa cũng do bên Edge phê duyệt lằng nhằng quá, hay bị từ chối nên mình ngại làm chứ không phải tại mình lười đâu. Sẵn tuần này đang thất nghiệp nên quyết lôi ra sửa.\nNói sơ qua lí do thì tiện ích dịch không thiếu, trước khi làm ra yate mình đã dùng một cái khá ưng cả về giao diện lẫn chức năng, lại có mặt trên đủ các trình duyệt. Nhu cầu của mình không nhiều, trộm vía tiếng Anh cũng đủ dùng nên chỉ cần dịch nhanh một vài từ thôi. Mà ghét cái là thỉnh thoảng nó hiện quảng cáo mua gói pro. Đối với mình thì tính năng pro cũng không hấp dẫn lắm: thêm chế độ tối và đồng bộ lịch sử dịch. Mình thích màu đen nên ứng dụng nào hỗ trợ nền tối mình đều bật hết, nhưng phải trả tiền để được bôi đen thì hơi bực nên mình quyết định tự làm luôn một cái. Tiện ích dịch thì phần quan trọng nhất là phải có API dịch rồi, vấn đề là dùng của bên nào. Tiêu chí của mình là làm miễn phí nên sau khi tham khảo một vài nguồn, mình chọn cách hơi tội lỗi là \u0026ldquo;mượn\u0026rdquo; API của Google. Có API rồi, giờ làm giao diện nữa thôi. Khoảng thời gian ấy mình đang viết React nên không ngần ngại chọn luôn nó. Có điều chỉ là tiện ích cùi cùi mà dùng React thì nặng quá, mình đổi sang một thằng anh em của nó là Preact, nguyên lí hoạt động tương tự nhưng nhẹ hơn rất nhiều. Nếu bạn nào thích React thì mình rất khuyến nghị dùng thử nhé. Sau khoảng một tháng mò mẫm thì tiện ích của mình được lên kệ. Tính năng cũng không thua kém hàng nhà người ta mấy: dịch, phát âm, tìm từ đồng nghĩa, vv. Ban đầu mình cũng chăm sửa lỗi nhưng rồi lượng người dùng ít, mình lại bận đi làm nên bỏ ngỏ. Được cái là dù sau 3 năm nhưng khi mở mã nguồn ra mình không phải thốt lên \u0026ldquo;thằng nào viết ra cái đống 💩 này?\u0026rdquo;.\nCập nhật là một phần tất yếu của phát triển phần mềm. Một phần mềm quá lâu không có gì mới sẽ dễ bị lãng quên hoặc thay thế. Hiện giờ không thấy ai ngoài mình dùng yate nữa. Vậy sao mình còn chọn quay lại bảo trì nó? Vì dạo này mình hơi rảnh, lỗi thì vẫn còn, và mỗi lần gặp lỗi mình cũng thấy khó chịu. Mình không muốn mất công tìm kiếm tiện ích khác. Tóm lại là đã muốn thì cần gì lí do, cứ làm thôi!\nViết tới đây thì buồn ngủ quá, máy cũng sắp hết pin. Mình bắt đầu viết từ 2 giờ chiều và giờ là gần 11 giờ đêm, có một đoạn ngắn thôi mà vừa viết vừa sửa cũng tốn thời gian phết. Dốt văn cũng khổ 😂. Mai mình sẽ duyệt lại lần nữa rồi mới đăng được. Quá trình cập nhật mã nguồn để kì tới vậy, hẹn gặp lại các bạn.\n","date":"22 tháng 4 2025","externalUrl":null,"permalink":"/work/unearthed-notes-building-my-own-browser-extension/","section":"Chuyện nghề","summary":"","title":"Đào mộ bút kí: Tự xây dựng tiện ích cho trình duyệt","type":"work"},{"content":"Bài mở đầu cho blog này. Hiển nhiên.\nĐây không phải lần đầu mình làm blog nhưng vì lười và dốt văn nên viết được một, hai bài là mình bỏ. Gần đây mình muốn xây dựng một vài thứ trong thời gian rảnh nên viết để có động lực làm. Quên chưa giới thiệu, mình làm \u0026ldquo;vua của mọi nghề\u0026rdquo; , lập trình, nên tiêu đề của bài viết này lấy cảm hứng từ bài học số một cho mọi lập trình viên. Tuy hơi nhàm chán nhưng\u0026hellip; kệ đi, mình dốt văn mà, vả lại chắc gì đã có ai đọc 😂, chủ yếu là có cái để khởi đầu bớt trống thôi.\nThôi, mở đầu tạm như thế, hi vọng những bài sau (nếu blog này không chết yểu như mấy cái trước 😅) sẽ khá hơn, xin chào và hẹn gặp lại.\n","date":"15 tháng 4 2025","externalUrl":null,"permalink":"/random-stuff/hello-world/","section":"Chuyện linh tinh","summary":"","title":"Chào thế giới","type":"random-stuff"},{"content":"","date":"15 tháng 4 2025","externalUrl":null,"permalink":"/en/tags/misc/","section":"Tags","summary":"","title":"Misc","type":"tags"}]